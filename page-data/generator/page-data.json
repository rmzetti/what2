{
    "componentChunkName": "component---node-modules-gatsby-theme-primer-wiki-src-templates-post-query-js",
    "path": "/generator/",
    "result": {"data":{"mdx":{"id":"9482bb61-79a7-5295-a866-78caa027cf8b","tableOfContents":{"items":[{"url":"#zetti-ssg-basics-and-extras","title":"zetti ssg basics and extras","items":[{"url":"#generate-or-update-sitemaprawtxt","title":"Generate or update 'sitemapRaw.txt'"},{"url":"#check-and-convert-wikilinks","title":"Check and convert wikilinks"},{"url":"#generate-or-update-networkhtml-to-produce-site-network-graphs","title":"Generate or update network.html to produce site network graphs"},{"url":"#generate-sitemaptxt-for-seo","title":"Generate 'sitemap.txt' for SEO"},{"url":"#generate-the-sitsearchtxt-file-for-search","title":"Generate the 'sitsearch.txt' file for search"},{"url":"#generate-the-json-data-for-bm25-search-if-used","title":"Generate the json data for bm25 search if used"}]}]},"fields":{"title":"zetti ssg basics and extras","slug":"/generator/","url":"https://whatamigoingtodonow.net/generator/","editUrl":"https://github.com/rmzetti/what/tree/main/generator.md","lastUpdatedAt":"2023-06-06T05:35:07.000Z","lastUpdated":"6/6/2023","gitCreatedAt":"2023-06-06T05:35:07.000Z","shouldShowTitle":false},"frontmatter":{"title":"","description":null,"imageAlt":null,"tags":[],"date":null,"dateModified":null,"language":null,"seoTitle":null,"image":null},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"zetti-ssg-basics-and-extras\"\n  }, \"zetti ssg basics and extras\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/#zetti-ssg-basics-and-extras/\"\n  }, \"zetti ssg basics and extras\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/#generate-or-update-sitemaprawtxt/\"\n  }, \"Generate or update 'sitemapRaw.txt'\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/#check-and-convert-wikilinks/\"\n  }, \"Check and convert wikilinks\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/#generate-sitemaptxt-for-seo/\"\n  }, \"Generate 'sitemap.txt' for SEO\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/#generate-the-searchtxt-file-for-search/\"\n  }, \"Generate the 'search.txt' file for search\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/#generate-the-sitesearchtxt-file-for-bm25-search/\"\n  }, \"Generate the 'sitesearch.txt' file for bm25 search\"))))), mdx(\"h2\", {\n    \"id\": \"generate-or-update-sitemaprawtxt\"\n  }, \"Generate or update 'sitemapRaw.txt'\"), mdx(\"p\", null, \"'SitemapRaw.txt' lists all files that will appear in the folder/file list. It excludes files (like 'sitemapRaw.txt' itself) which should not appear in the list.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"node //recursively generate/update list of files to sitemapRaw.txt\",\n    \"node\": true,\n    \"//recursively\": true,\n    \"generate/update\": true,\n    \"list\": true,\n    \"of\": true,\n    \"files\": true,\n    \"to\": true,\n    \"sitemapRaw.txt\": true\n  }, \"const path = require(\\\"path\\\");\\nconst fs   = require(\\\"fs\\\");\\nlet files  = [];\\nfunction readDir(dir) {\\n  let dirf=fs.readdirSync(dir);\\n  for (let dirs of [true,false]) //do directories first\\n    dirf.forEach(f => {\\n      if (!(f.startsWith('.') || f.indexOf('_files')==0)) {\\n      const fullpath = path.join(dir, f);\\n      if (dirs && fs.statSync(fullpath).isDirectory()) {\\n        if (f=='lib') return; //skip lib folder\\n        return readDir(fullpath); //recurse\\n      } else if (!dirs) {  //skip certain files so they don't appear when browsing the site\\n          if ( ['easymde.html','generator.md','index.html','manifest.json','network.html','sitemap.txt','sitemapRaw.txt', 'sitesearch.txt',\\n                'stackedit.html','sw.js','tinymde.html','workbox-config.js'].includes(f) ) return;\\n          if(f.endsWith('.md') || f.endsWith('.html') || f.endsWith('.htm') || f.endsWith('.pdf') || f.endsWith('.txt') || f.endsWith('.jpg') || f.endsWith('.jpeg') || f.endsWith('.png') || f.endsWith('.gif'))\\n              return files.push(fullpath);\\n      }}\\n    })\\n}\\nreadDir(\\\"./\\\");\\nfiles.forEach((f,i)=>files[i]=f.replace(/\\\\\\\\/g,'/')); //change to forward slashes\\nlet s=\\\"\\\";\\nfiles.forEach(f => s+=f+'\\\\n')\\nfs.writeFile(\\\"sitemapRaw.txt\\\",s,(err)=>{ if (err) console.log(err); })\\nconsole.log('ok - sitemapRaw.txt saved');\\n\")), mdx(\"h2\", {\n    \"id\": \"check-and-convert-wikilinks\"\n  }, \"Check and convert wikilinks\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"node //check wikilinks [[abc]] with [[full/path/to/abc|abc]]\",\n    \"node\": true,\n    \"//check\": true,\n    \"wikilinks\": true,\n    \"[[abc]]\": true,\n    \"with\": true,\n    \"[[full/path/to/abc|abc]]\": true\n  }, \"//can overwrite before deploying the site to save checking wikilinks when a page is loaded (uncomment writefile)\\nconst fs   = require(\\\"fs\\\");\\nlet files=(''+fs.readFileSync('sitemapRaw.txt')).split('\\\\n');\\n// files=['test.md']; //uncomment for a test\\nfiles.forEach(f => {\\n    if (f.endsWith('.md')){\\n    let t=''+fs.readFileSync(f);\\n    let re = /\\\\[\\\\[(.*?)]]/g,m;\\n    let changes=false;\\n    let tlist='';\\n    while (m = re.exec(t)) {\\n      let s = m[1], s1 = '', s2 = '';\\n      if (s.indexOf('|') > 0) [s,s2]=s.split('|');\\n      if (s.indexOf('.') < 0) s += '.md';\\n      s=s.toLowerCase();\\n      for (i = 0; i < files.length; i++) { //include all matching links\\n        if (files[i].toLowerCase().endsWith(s)) {\\n          if (s1 != '') s1 += '&';\\n          if (s2 == '') s2 = files[i].substring(files[i].lastIndexOf('/') + 1);\\n          if (s2.includes('.')) s2 = s2.substring(0, s2.indexOf('.'))\\n          s1 += '[[' + files[i] + '|' + s2 + ']]';\\n        }\\n      }\\n      if (s1 != '') {\\n        t = t.substring(0, re.lastIndex - m[0].length) + s1 + t.substring(re.lastIndex);\\n        re.lastIndex += s1.length - m[0].length;\\n        if ( m[0] != s1 ) {\\n          changes=true;\\n          tlist+='\\\\n> '+s+' > '+s1;\\n        }\\n      }\\n    }\\n    if ( changes ) console.log(f,tlist);\\n    //fs.writeFileSync(f,t); //uncomment this to overwrite the original file(s)\\n}})\\nconsole.log('ok');\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"node //check italicised links\",\n    \"node\": true,\n    \"//check\": true,\n    \"italicised\": true,\n    \"links\": true\n  }, \"const fs   = require(\\\"fs\\\");\\nlet files=(''+fs.readFileSync('sitemapRaw.txt')).split('\\\\n');\\nfiles.forEach(f => {\\n    if (f.endsWith('.md')){\\n    console.log(f);\\n    let t=''+fs.readFileSync(f);\\n    // let re = /\\\\[\\\\[(.*?)]]/g,m;\\n    let re = /\\\\*\\\\[(.*?)\\\\]\\\\*/g,m;\\n    while (m = re.exec(t)) {\\n        console.log('> '+m[1]);\\n    }\\n    //fs.writeFileSync(f,t);\\n}})\\nconsole.log('ok');\\n\")), mdx(\"h2\", {\n    \"id\": \"generate-or-update-networkhtml-to-produce-site-network-graphs\"\n  }, \"Generate or update network.html to produce site network graphs\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"node //generate network.html to produce site network graphs\",\n    \"node\": true,\n    \"//generate\": true,\n    \"network.html\": true,\n    \"to\": true,\n    \"produce\": true,\n    \"site\": true,\n    \"network\": true,\n    \"graphs\": true\n  }, \"//this uses sitemapRaw.txt (generated by prevous codeblock) & searches each markdown file for links\\nconst fs   = require(\\\"fs\\\");\\nlet files=(''+fs.readFileSync('sitemapRaw.txt')).split('\\\\n');\\n//get markdown file names\\nlet a=[],mdf=[],mdftest=[];\\nfiles.forEach(f => {\\n  if(f.endsWith('.md')) {\\n      mdf.push(f);\\n      mdftest.push(f.substring(0,f.length-3).toLowerCase());\\n    }\\n});\\n//get nodes = markdown files, edges = links, & groups/colours = path depth\\nlet g='', iig=0, ig=0;\\nfunction group(a){ //generate groups as path depth\\n    if (a.substring(0,a.indexOf('/'))=='') {g='/';ig=0;}\\n    else if (a.substring(0,a.indexOf('/',a.indexOf('/')+1))==''){\\n        if (g==a.substring(0,a.indexOf('/'))){ig=iig;}\\n        else {g=a.substring(0,a.indexOf('/'));ig=++iig;}\\n    } else {\\n        if (g==a.substring(0,a.indexOf('/',a.indexOf('/')+1))){ig=iig;}\\n        else {g=a.substring(0,a.indexOf('/',a.indexOf('/')+1));ig=++iig;}\\n    }\\n    return ig;\\n}\\nlet edges='[', nodes='[', nedges=0, mults=0;\\nfor (let i=0;i<mdf.length;i++) { //for each markdown file\\n  //append node\\n  let f=mdf[i];\\n  nodes+='{ id: '+i+', label: \\\"'+f.substring(f.lastIndexOf('/')+1,f.indexOf('.md'))+'\\\", group: '+group(f)+', title: \\\"'+f+'\\\"  },\\\\n';\\n  let text=fs.readFileSync(f);\\n  let temp=[];\\n  function findLinks(test){\\n    test=test.trim().toLowerCase();\\n    if(test.startsWith('http')) return; //skip if http\\n    test=test.replace(/%20/g,' ')\\n    // test=test.substring(test.lastIndexOf('/')+1);\\n    let multiple=false;\\n    for (let j=0;j<mdf.length;j++) {\\n        if(mdftest[j]==test || mdftest[j].endsWith('/'+test)) { //look for files which match link\\n            edges+='{ from: '+i+', to: '+j+' },\\\\n';nedges++;\\n            if (multiple) mults++;\\n            else multiple=true;\\n            // break; //break here for first match only\\n        }\\n    } \\n  }\\n  let re=/\\\\[\\\\[([\\\\w\\\\s/.-]*?)(\\\\.md)?(\\\\|.*)?\\\\]\\\\]/g; //re to find wikilinks, .md not needed for test\\n  while ((temp=re.exec(text))!=null) { findLinks(temp[1]); }\\n  re=/\\\\]\\\\(<?([^)]*?)\\\\.md/g; //re to find markdown links to .md only\\n  while ((temp=re.exec(text))!=null) { findLinks(temp[1]); }\\n}\\nnodes+=']';edges+=']';\\nlet html=`<!DOCTYPE html>\\n<html>\\n<head>\\n<link rel=\\\"stylesheet\\\" href=\\\"./lib/zetti.css\\\">\\n<style>.vis-tooltip { position: absolute;}\\n</style><!-- this enables showing title on hover -->\\n</head>\\n<body>\\n<span style=\\\"position:absolute; top:0; right:0; z-index:1;\\\">\\n  <button title=\\\"more\\\" onclick=\\\"ndepth++;subsetNodes();draw();\\\" class=\\\"btn\\\">+</button>\\n  <button title=\\\"less\\\" onclick=\\\"ndepth--;if(ndepth==0)ndepth=1;subsetNodes();draw();\\\" class=\\\"btn\\\">-</button>\\n</span>\\n<div id=\\\"mynetwork\\\" style=\\\"position:absolute;width: 100%; height: 100%;\\\"></div>\\n<script src=\\\"./lib/vis-network.min.js\\\"></script>\\n<script>\\nlet param=''+window.location;\\nif (param.indexOf('?')<0) param='index.md';\\nelse param=param.substring(param.indexOf('?')+6).replace(/%20/g,' ');\\nparam=param.toLowerCase();\\n// if(parent.ifid=='peek2') document.getElementById('btnnet').style.display='none';\\nlet ndepth=1;\\nvar allNodes=${nodes};\\nvar edges=${edges};\\nfunction getNodes(nodes1) { // get nodes connected to the nodes in nodes1\\n    function unique(value, index, self) { return self.indexOf(value) === index; }\\n    let nodes2=[];\\n    for (let n of nodes1) {\\n      nodes2.push(n);\\n      for (let e of edges) {\\n        if (e.from == n) { nodes2.push(e.to); }\\n        else if (e.to == n) { nodes2.push(e.from); }\\n      }\\n    }\\n    return nodes2.filter(unique).sort(function(a, b) {return a-b;});\\n}\\nlet nodeNumsOrig=[];\\nif (param!='' && param.endsWith('.md')) { //param is the file name\\n    for (let i=0;i<allNodes.length;i++){\\n        if (allNodes[i].title.toLowerCase()==param) { nodeNumsOrig.push(i); }\\n    }\\n}\\nif (!param.endsWith('.md') || getNodes(nodeNumsOrig).length<=1) { \\n      param=param.substring(0,param.lastIndexOf('/'));\\n      for (let i=0;i<allNodes.length;i++){ //if not markdown or only 1 node, get other nodes in same folder\\n        if (allNodes[i].title.substring(0,allNodes[i].title.lastIndexOf('/')).toLowerCase()==param) { nodeNumsOrig.push(i); }\\n      }\\n      ndepth=1;\\n}\\nfunction subsetNodes() {\\n    let nodeNums=[...nodeNumsOrig];\\n    for (let i=1;i<=ndepth;i++) nodeNums=[...getNodes(nodeNums)];\\n    let nodes=[...allNodes];\\n    for (let i=0;i<nodes.length;i++){ //draw orig node(s) square\\n      if (nodeNumsOrig.indexOf(i)>=0) {nodes[i].shape=\\\"square\\\";nodes[i].size=25;nodes[i].group=255;}\\n    }\\n    for (let i=nodes.length-1;i>=0;i--){ //remove nodes not in nodeNums\\n      if (nodeNums.indexOf(i)<0)nodes.splice(i,1);\\n    }\\n    return nodes;\\n}\\nfunction draw() {\\n  if (parent.usedark) {\\n    document.body.style.backgroundColor = \\\"#111\\\";\\n    document.styleSheets[0].insertRule(\\\".vis-tooltip { color: white;}\\\", 0);\\n  } else document.body.style.backgroundColor = \\\"#eee\\\";\\n  // create a network\\n  var container = document.getElementById(\\\"mynetwork\\\");\\n  let nodes1=new vis.DataSet(subsetNodes());\\n  let edges1=new vis.DataSet(edges);\\n  var data = {\\n    nodes: nodes1,\\n    edges: edges1,\\n  };\\n  var options = {\\n    nodes: {\\n      shape: \\\"dot\\\",\\n      size: 16,\\n      font: {color: color()},\\n    },\\n    edges: {\\n      arrows: \\\"to\\\",\\n    },\\n    interaction: {hover: true, hoverConnectedEdges:true, tooltipDelay: 300,},\\n    physics: {\\n      forceAtlas2Based: {\\n        gravitationalConstant: -26,\\n        centralGravity: 0.005,\\n        springLength: 230,\\n        springConstant: 0.18,\\n      },\\n      maxVelocity: 146,\\n      solver: \\\"forceAtlas2Based\\\",\\n      timestep: 0.35,\\n      stabilization: { iterations: 150 },\\n    },\\n  };\\n  var network = new vis.Network(container, data, options);\\n  network.on('click',function(properties){ \\n    if(properties.nodes.length>0  && getNodes([properties.nodes[0]]).length>1){\\n      ndepth=1; //reset depth for quick response\\n      let temp=allNodes[properties.nodes[0]].label.replace(/%20/g,' ');\\n      let temp2=window.parent.hroot+'?file='+allNodes[properties.nodes[0]].title;\\n      parent.window.history.pushState({},\\\"\\\",parent.window.location.href);\\n      parent.hfile = allNodes[properties.nodes[0]].title;\\n      parent.loadfile(parent.hfile,parent.main,false);\\n      nodeNumsOrig=[properties.nodes[0]];subsetNodes();draw();\\n    } \\n  });\\n}\\nfunction color() {\\n  if (parent.usedark) return '#ffffff';\\n  else return '#000000';\\n}\\nwindow.addEventListener(\\\"load\\\", () => { if (window.innerWidth!=0) draw(); });\\nwindow.addEventListener(\\\"resize\\\", () => { if (window.innerWidth!=0) draw(); });\\n</script></body></html>` //in network.on statement above, \\\\x60 is ` & \\\\x24 is $\\nfs.writeFile(\\\"network.html\\\",html,(err)=>{ if (err) console.log(err); })\\nconsole.log('ok - network.html saved: '+mdf.length+','+nedges+','+mults);\\n\")), mdx(\"h2\", {\n    \"id\": \"generate-sitemaptxt-for-seo\"\n  }, \"Generate 'sitemap.txt' for SEO\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"node //to produce sitemap.txt for SEO\",\n    \"node\": true,\n    \"//to\": true,\n    \"produce\": true,\n    \"sitemap.txt\": true,\n    \"for\": true,\n    \"SEO\": true\n  }, \"//enter the site url below (example shown) and run this code\\n//note that this is just for SEO, sitemapRaw.txt is used for index.html\\nsiteUrl='https://whatamigoingtodonow.net/starter/';\\nconst fs   = require(\\\"fs\\\");\\nlet files=(''+fs.readFileSync('sitemapRaw.txt')).split('\\\\n');\\nlet s='';\\nfiles.forEach(f => {\\n  if(f.endsWith('.md')) s+=siteUrl+'index.html?file='+f+'\\\\n';\\n  else if(f!='') s+=siteUrl+f+'\\\\n';\\n});\\nfs.writeFile(\\\"sitemap.txt\\\",s,(err)=>{ if (err) console.log(err); })\\nconsole.log('ok');\\n\")), mdx(\"h2\", {\n    \"id\": \"generate-the-sitsearchtxt-file-for-search\"\n  }, \"Generate the 'sitsearch.txt' file for search\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"node //generate search.txt file for search\",\n    \"node\": true,\n    \"//generate\": true,\n    \"search.txt\": true,\n    \"file\": true,\n    \"for\": true,\n    \"search\": true\n  }, \"//produce file with combined text of all .md & .txt files for search etc\\nlet t=new Date().getTime()\\nconst fs   = require(\\\"fs\\\");\\nlet files=(''+fs.readFileSync('sitemapRaw.txt')).split('\\\\n');\\nlet s='';\\nfiles.forEach((f,i) => {\\n  if(f.endsWith('.md') || f.endsWith('.txt')) {\\n    let t=(''+fs.readFileSync(f)).split('\\\\n');\\n    t.forEach((line,j) =>{s+=line=''+i+' '+(j+1)+': '+line+'\\\\n';})\\n    // t=t.replace(/^/mg,''+i+' ');\\n    //s+=t.join('\\\\n');\\n  }\\n});\\nfs.writeFile(\\\"sitesearch.txt\\\",s,(err)=>{ if (err) console.log(err); })\\nconsole.log('done in '+(new Date().getTime()-t)/1000+' sec')\\n\")), mdx(\"h2\", {\n    \"id\": \"generate-the-json-data-for-bm25-search-if-used\"\n  }, \"Generate the json data for bm25 search if used\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"node //generate sitesearch.txt file for search (only needed if using bm25 search)\",\n    \"node\": true,\n    \"//generate\": true,\n    \"sitesearch.txt\": true,\n    \"file\": true,\n    \"for\": true,\n    \"search\": true,\n    \"(only\": true,\n    \"needed\": true,\n    \"if\": true,\n    \"using\": true,\n    \"bm25\": true,\n    \"search)\": true\n  }, \"// produce json data with combined text of .md & .txt files for search etc\\n// format is { \\\"title\\\":\\\"filename\\\",\\\"body\\\",\\\"file content (no quotes and \\\\\\\\n for \\\\n)\\\"},{etc..}\\n// & insert data into /bm25/bundle.js\\nlet t=new Date().getTime()\\nconst fs   = require(\\\"fs\\\");\\nlet files=(''+fs.readFileSync('sitemapRaw.txt')).split('\\\\n');\\nlet s='[';let i=0;\\nfiles.forEach((f,i) => {\\n  if(f.endsWith('.md') || f.endsWith('.txt')) {\\n    s+='{\\\"title\\\":\\\"'+f+'\\\",\\\"body\\\":\\\"';\\n    let t=(''+fs.readFileSync(f)).split('\\\\n');\\n    t.forEach((line,j) =>{\\n      line=line.replace(/[^A-Za-z0-9 ,.]+/g,' ');\\n      s+=''+j+':'+line+'<br>';\\n    })\\n    s+='\\\"},';\\n  }\\n});\\ns+=']';\\nlet bundle=''+fs.readFileSync('bm25/bundle.js')\\nbundle=bundle.replace(/start json data[\\\\s\\\\S]*end json data/,'start json data\\\\n'+s+'\\\\n//end json data')\\nfs.writeFile(\\\"bm25/bundle.js\\\",bundle,(err)=>{ if (err) console.log(err); })\\nconsole.log('done in '+(new Date().getTime()-t)/1000+' sec')\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"//original data in bm25 bundle\",\n    \"//original\": true,\n    \"data\": true,\n    \"in\": true,\n    \"bm25\": true,\n    \"bundle\": true\n  }, \"const fs   = require(\\\"fs\\\");\\nlet s=''+fs.readFileSync('/extras/bm25/test.json')\\nlet bundle=''+fs.readFileSync('bm25/bundle.js')\\nbundle=bundle.replace(/start json data[\\\\s\\\\S]*end json data/,'start json data\\\\n'+s+'\\\\n//end json data')\\nfs.writeFile(\\\"bm25/bundle.js\\\",bundle,(err)=>{ if (err) console.log(err); })\\nconsole.log('ok')\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawBody":"# zetti ssg basics and extras\n\n- [zetti ssg basics and extras](#zetti-ssg-basics-and-extras)\n  - [Generate or update 'sitemapRaw.txt'](#generate-or-update-sitemaprawtxt)\n  - [Check and convert wikilinks](#check-and-convert-wikilinks)\n  - [Generate 'sitemap.txt' for SEO](#generate-sitemaptxt-for-seo)\n  - [Generate the 'search.txt' file for search](#generate-the-searchtxt-file-for-search)\n  - [Generate the 'sitesearch.txt' file for bm25 search](#generate-the-sitesearchtxt-file-for-bm25-search)\n\n\n## Generate or update 'sitemapRaw.txt' \n\n'SitemapRaw.txt' lists all files that will appear in the folder/file list. It excludes files (like 'sitemapRaw.txt' itself) which should not appear in the list.\n\n```js node //recursively generate/update list of files to sitemapRaw.txt\nconst path = require(\"path\");\nconst fs   = require(\"fs\");\nlet files  = [];\nfunction readDir(dir) {\n  let dirf=fs.readdirSync(dir);\n  for (let dirs of [true,false]) //do directories first\n    dirf.forEach(f => {\n      if (!(f.startsWith('.') || f.indexOf('_files')==0)) {\n      const fullpath = path.join(dir, f);\n      if (dirs && fs.statSync(fullpath).isDirectory()) {\n        if (f=='lib') return; //skip lib folder\n        return readDir(fullpath); //recurse\n      } else if (!dirs) {  //skip certain files so they don't appear when browsing the site\n          if ( ['easymde.html','generator.md','index.html','manifest.json','network.html','sitemap.txt','sitemapRaw.txt', 'sitesearch.txt',\n\t\t        'stackedit.html','sw.js','tinymde.html','workbox-config.js'].includes(f) ) return;\n          if(f.endsWith('.md') || f.endsWith('.html') || f.endsWith('.htm') || f.endsWith('.pdf') || f.endsWith('.txt') || f.endsWith('.jpg') || f.endsWith('.jpeg') || f.endsWith('.png') || f.endsWith('.gif'))\n              return files.push(fullpath);\n      }}\n    })\n}\nreadDir(\"./\");\nfiles.forEach((f,i)=>files[i]=f.replace(/\\\\/g,'/')); //change to forward slashes\nlet s=\"\";\nfiles.forEach(f => s+=f+'\\n')\nfs.writeFile(\"sitemapRaw.txt\",s,(err)=>{ if (err) console.log(err); })\nconsole.log('ok - sitemapRaw.txt saved');\n```\n\n## Check and convert wikilinks\n\n```js node //check wikilinks [[abc]] with [[full/path/to/abc|abc]]\n//can overwrite before deploying the site to save checking wikilinks when a page is loaded (uncomment writefile)\nconst fs   = require(\"fs\");\nlet files=(''+fs.readFileSync('sitemapRaw.txt')).split('\\n');\n// files=['test.md']; //uncomment for a test\nfiles.forEach(f => {\n    if (f.endsWith('.md')){\n    let t=''+fs.readFileSync(f);\n    let re = /\\[\\[(.*?)]]/g,m;\n    let changes=false;\n    let tlist='';\n    while (m = re.exec(t)) {\n      let s = m[1], s1 = '', s2 = '';\n      if (s.indexOf('|') > 0) [s,s2]=s.split('|');\n      if (s.indexOf('.') < 0) s += '.md';\n      s=s.toLowerCase();\n      for (i = 0; i < files.length; i++) { //include all matching links\n        if (files[i].toLowerCase().endsWith(s)) {\n          if (s1 != '') s1 += '&';\n          if (s2 == '') s2 = files[i].substring(files[i].lastIndexOf('/') + 1);\n          if (s2.includes('.')) s2 = s2.substring(0, s2.indexOf('.'))\n          s1 += '[[' + files[i] + '|' + s2 + ']]';\n        }\n      }\n      if (s1 != '') {\n        t = t.substring(0, re.lastIndex - m[0].length) + s1 + t.substring(re.lastIndex);\n        re.lastIndex += s1.length - m[0].length;\n        if ( m[0] != s1 ) {\n          changes=true;\n          tlist+='\\n> '+s+' > '+s1;\n        }\n      }\n    }\n    if ( changes ) console.log(f,tlist);\n    //fs.writeFileSync(f,t); //uncomment this to overwrite the original file(s)\n}})\nconsole.log('ok');\n```\n\n```js node //check italicised links\nconst fs   = require(\"fs\");\nlet files=(''+fs.readFileSync('sitemapRaw.txt')).split('\\n');\nfiles.forEach(f => {\n    if (f.endsWith('.md')){\n    console.log(f);\n    let t=''+fs.readFileSync(f);\n    // let re = /\\[\\[(.*?)]]/g,m;\n    let re = /\\*\\[(.*?)\\]\\*/g,m;\n    while (m = re.exec(t)) {\n        console.log('> '+m[1]);\n    }\n    //fs.writeFileSync(f,t);\n}})\nconsole.log('ok');\n```\n\n## Generate or update network.html to produce site network graphs\n\n\n```js node //generate network.html to produce site network graphs\n//this uses sitemapRaw.txt (generated by prevous codeblock) & searches each markdown file for links\nconst fs   = require(\"fs\");\nlet files=(''+fs.readFileSync('sitemapRaw.txt')).split('\\n');\n//get markdown file names\nlet a=[],mdf=[],mdftest=[];\nfiles.forEach(f => {\n  if(f.endsWith('.md')) {\n      mdf.push(f);\n      mdftest.push(f.substring(0,f.length-3).toLowerCase());\n    }\n});\n//get nodes = markdown files, edges = links, & groups/colours = path depth\nlet g='', iig=0, ig=0;\nfunction group(a){ //generate groups as path depth\n    if (a.substring(0,a.indexOf('/'))=='') {g='/';ig=0;}\n    else if (a.substring(0,a.indexOf('/',a.indexOf('/')+1))==''){\n        if (g==a.substring(0,a.indexOf('/'))){ig=iig;}\n        else {g=a.substring(0,a.indexOf('/'));ig=++iig;}\n    } else {\n        if (g==a.substring(0,a.indexOf('/',a.indexOf('/')+1))){ig=iig;}\n        else {g=a.substring(0,a.indexOf('/',a.indexOf('/')+1));ig=++iig;}\n    }\n    return ig;\n}\nlet edges='[', nodes='[', nedges=0, mults=0;\nfor (let i=0;i<mdf.length;i++) { //for each markdown file\n  //append node\n  let f=mdf[i];\n  nodes+='{ id: '+i+', label: \"'+f.substring(f.lastIndexOf('/')+1,f.indexOf('.md'))+'\", group: '+group(f)+', title: \"'+f+'\"  },\\n';\n  let text=fs.readFileSync(f);\n  let temp=[];\n  function findLinks(test){\n    test=test.trim().toLowerCase();\n    if(test.startsWith('http')) return; //skip if http\n    test=test.replace(/%20/g,' ')\n    // test=test.substring(test.lastIndexOf('/')+1);\n    let multiple=false;\n    for (let j=0;j<mdf.length;j++) {\n        if(mdftest[j]==test || mdftest[j].endsWith('/'+test)) { //look for files which match link\n            edges+='{ from: '+i+', to: '+j+' },\\n';nedges++;\n            if (multiple) mults++;\n            else multiple=true;\n            // break; //break here for first match only\n        }\n    } \n  }\n  let re=/\\[\\[([\\w\\s/.-]*?)(\\.md)?(\\|.*)?\\]\\]/g; //re to find wikilinks, .md not needed for test\n  while ((temp=re.exec(text))!=null) { findLinks(temp[1]); }\n  re=/\\]\\(<?([^)]*?)\\.md/g; //re to find markdown links to .md only\n  while ((temp=re.exec(text))!=null) { findLinks(temp[1]); }\n}\nnodes+=']';edges+=']';\nlet html=`<!DOCTYPE html>\n<html>\n<head>\n<link rel=\"stylesheet\" href=\"./lib/zetti.css\">\n<style>.vis-tooltip { position: absolute;}\n</style><!-- this enables showing title on hover -->\n</head>\n<body>\n<span style=\"position:absolute; top:0; right:0; z-index:1;\">\n  <button title=\"more\" onclick=\"ndepth++;subsetNodes();draw();\" class=\"btn\">+</button>\n  <button title=\"less\" onclick=\"ndepth--;if(ndepth==0)ndepth=1;subsetNodes();draw();\" class=\"btn\">-</button>\n</span>\n<div id=\"mynetwork\" style=\"position:absolute;width: 100%; height: 100%;\"></div>\n<script src=\"./lib/vis-network.min.js\"></script>\n<script>\nlet param=''+window.location;\nif (param.indexOf('?')<0) param='index.md';\nelse param=param.substring(param.indexOf('?')+6).replace(/%20/g,' ');\nparam=param.toLowerCase();\n// if(parent.ifid=='peek2') document.getElementById('btnnet').style.display='none';\nlet ndepth=1;\nvar allNodes=${nodes};\nvar edges=${edges};\nfunction getNodes(nodes1) { // get nodes connected to the nodes in nodes1\n    function unique(value, index, self) { return self.indexOf(value) === index; }\n    let nodes2=[];\n    for (let n of nodes1) {\n      nodes2.push(n);\n      for (let e of edges) {\n        if (e.from == n) { nodes2.push(e.to); }\n        else if (e.to == n) { nodes2.push(e.from); }\n      }\n    }\n    return nodes2.filter(unique).sort(function(a, b) {return a-b;});\n}\nlet nodeNumsOrig=[];\nif (param!='' && param.endsWith('.md')) { //param is the file name\n    for (let i=0;i<allNodes.length;i++){\n        if (allNodes[i].title.toLowerCase()==param) { nodeNumsOrig.push(i); }\n    }\n}\nif (!param.endsWith('.md') || getNodes(nodeNumsOrig).length<=1) { \n      param=param.substring(0,param.lastIndexOf('/'));\n      for (let i=0;i<allNodes.length;i++){ //if not markdown or only 1 node, get other nodes in same folder\n        if (allNodes[i].title.substring(0,allNodes[i].title.lastIndexOf('/')).toLowerCase()==param) { nodeNumsOrig.push(i); }\n      }\n      ndepth=1;\n}\nfunction subsetNodes() {\n    let nodeNums=[...nodeNumsOrig];\n    for (let i=1;i<=ndepth;i++) nodeNums=[...getNodes(nodeNums)];\n    let nodes=[...allNodes];\n    for (let i=0;i<nodes.length;i++){ //draw orig node(s) square\n      if (nodeNumsOrig.indexOf(i)>=0) {nodes[i].shape=\"square\";nodes[i].size=25;nodes[i].group=255;}\n    }\n    for (let i=nodes.length-1;i>=0;i--){ //remove nodes not in nodeNums\n      if (nodeNums.indexOf(i)<0)nodes.splice(i,1);\n    }\n    return nodes;\n}\nfunction draw() {\n  if (parent.usedark) {\n    document.body.style.backgroundColor = \"#111\";\n    document.styleSheets[0].insertRule(\".vis-tooltip { color: white;}\", 0);\n  } else document.body.style.backgroundColor = \"#eee\";\n  // create a network\n  var container = document.getElementById(\"mynetwork\");\n  let nodes1=new vis.DataSet(subsetNodes());\n  let edges1=new vis.DataSet(edges);\n  var data = {\n    nodes: nodes1,\n    edges: edges1,\n  };\n  var options = {\n    nodes: {\n      shape: \"dot\",\n      size: 16,\n      font: {color: color()},\n    },\n    edges: {\n      arrows: \"to\",\n    },\n    interaction: {hover: true, hoverConnectedEdges:true, tooltipDelay: 300,},\n    physics: {\n      forceAtlas2Based: {\n        gravitationalConstant: -26,\n        centralGravity: 0.005,\n        springLength: 230,\n        springConstant: 0.18,\n      },\n      maxVelocity: 146,\n      solver: \"forceAtlas2Based\",\n      timestep: 0.35,\n      stabilization: { iterations: 150 },\n    },\n  };\n  var network = new vis.Network(container, data, options);\n  network.on('click',function(properties){ \n    if(properties.nodes.length>0  && getNodes([properties.nodes[0]]).length>1){\n      ndepth=1; //reset depth for quick response\n      let temp=allNodes[properties.nodes[0]].label.replace(/%20/g,' ');\n      let temp2=window.parent.hroot+'?file='+allNodes[properties.nodes[0]].title;\n      parent.window.history.pushState({},\"\",parent.window.location.href);\n      parent.hfile = allNodes[properties.nodes[0]].title;\n      parent.loadfile(parent.hfile,parent.main,false);\n      nodeNumsOrig=[properties.nodes[0]];subsetNodes();draw();\n    } \n  });\n}\nfunction color() {\n  if (parent.usedark) return '#ffffff';\n  else return '#000000';\n}\nwindow.addEventListener(\"load\", () => { if (window.innerWidth!=0) draw(); });\nwindow.addEventListener(\"resize\", () => { if (window.innerWidth!=0) draw(); });\n</script></body></html>` //in network.on statement above, \\x60 is ` & \\x24 is $\nfs.writeFile(\"network.html\",html,(err)=>{ if (err) console.log(err); })\nconsole.log('ok - network.html saved: '+mdf.length+','+nedges+','+mults);\n```\n\n## Generate 'sitemap.txt' for SEO\n\n```js node //to produce sitemap.txt for SEO\n//enter the site url below (example shown) and run this code\n//note that this is just for SEO, sitemapRaw.txt is used for index.html\nsiteUrl='https://whatamigoingtodonow.net/starter/';\nconst fs   = require(\"fs\");\nlet files=(''+fs.readFileSync('sitemapRaw.txt')).split('\\n');\nlet s='';\nfiles.forEach(f => {\n  if(f.endsWith('.md')) s+=siteUrl+'index.html?file='+f+'\\n';\n  else if(f!='') s+=siteUrl+f+'\\n';\n});\nfs.writeFile(\"sitemap.txt\",s,(err)=>{ if (err) console.log(err); })\nconsole.log('ok');\n```\n\n## Generate the 'sitsearch.txt' file for search\n\n```js node //generate search.txt file for search\n//produce file with combined text of all .md & .txt files for search etc\nlet t=new Date().getTime()\nconst fs   = require(\"fs\");\nlet files=(''+fs.readFileSync('sitemapRaw.txt')).split('\\n');\nlet s='';\nfiles.forEach((f,i) => {\n  if(f.endsWith('.md') || f.endsWith('.txt')) {\n    let t=(''+fs.readFileSync(f)).split('\\n');\n    t.forEach((line,j) =>{s+=line=''+i+' '+(j+1)+': '+line+'\\n';})\n    // t=t.replace(/^/mg,''+i+' ');\n    //s+=t.join('\\n');\n  }\n});\nfs.writeFile(\"sitesearch.txt\",s,(err)=>{ if (err) console.log(err); })\nconsole.log('done in '+(new Date().getTime()-t)/1000+' sec')\n```\n\n## Generate the json data for bm25 search if used\n\n```js node //generate sitesearch.txt file for search (only needed if using bm25 search)\n// produce json data with combined text of .md & .txt files for search etc\n// format is { \"title\":\"filename\",\"body\",\"file content (no quotes and \\\\n for \\n)\"},{etc..}\n// & insert data into /bm25/bundle.js\nlet t=new Date().getTime()\nconst fs   = require(\"fs\");\nlet files=(''+fs.readFileSync('sitemapRaw.txt')).split('\\n');\nlet s='[';let i=0;\nfiles.forEach((f,i) => {\n  if(f.endsWith('.md') || f.endsWith('.txt')) {\n    s+='{\"title\":\"'+f+'\",\"body\":\"';\n    let t=(''+fs.readFileSync(f)).split('\\n');\n    t.forEach((line,j) =>{\n      line=line.replace(/[^A-Za-z0-9 ,.]+/g,' ');\n      s+=''+j+':'+line+'<br>';\n    })\n    s+='\"},';\n  }\n});\ns+=']';\nlet bundle=''+fs.readFileSync('bm25/bundle.js')\nbundle=bundle.replace(/start json data[\\s\\S]*end json data/,'start json data\\n'+s+'\\n//end json data')\nfs.writeFile(\"bm25/bundle.js\",bundle,(err)=>{ if (err) console.log(err); })\nconsole.log('done in '+(new Date().getTime()-t)/1000+' sec')\n```\n\n```js //original data in bm25 bundle\nconst fs   = require(\"fs\");\nlet s=''+fs.readFileSync('/extras/bm25/test.json')\nlet bundle=''+fs.readFileSync('bm25/bundle.js')\nbundle=bundle.replace(/start json data[\\s\\S]*end json data/,'start json data\\n'+s+'\\n//end json data')\nfs.writeFile(\"bm25/bundle.js\",bundle,(err)=>{ if (err) console.log(err); })\nconsole.log('ok')\n```\n\n\n","excerpt":"zetti ssg basics and extras zetti ssg basics and extras Generate or update 'sitemapRaw.txt' Check and convert wikilinks Generate 'sitemap.t…","outboundReferences":[],"inboundReferences":[]},"tagsOutbound":{"nodes":[]}},"pageContext":{"tags":[],"slug":"/generator/","sidebarItems":[{"title":"Categories","items":[{"title":"Advanced Topics","url":"","items":[{"title":"Accepted File Formats","url":"/Advanced topics/Accepted file formats/","items":[]},{"title":"Contributing to Obsidian","url":"/Advanced topics/Contributing to Obsidian/","items":[]},{"title":"Customizing CSS","url":"/Advanced topics/Customizing CSS/","items":[]},{"title":"Deleting Files","url":"/Advanced topics/Deleting files/","items":[]},{"title":"Drag and Drop","url":"/Advanced topics/Drag and Drop/","items":[]},{"title":"How Obsidian Stores Data","url":"/Advanced topics/How Obsidian stores data/","items":[]},{"title":"HTML Sanitization","url":"/Advanced topics/HTML sanitization/","items":[]},{"title":"Insider Builds","url":"/Advanced topics/Insider builds/","items":[]},{"title":"Third-Party Plugins","url":"/Advanced topics/Third-party plugins/","items":[]},{"title":"Using Obsidian URI","url":"/Advanced topics/Using obsidian URI/","items":[]},{"title":"YAML Front Matter","url":"/Advanced topics/YAML front matter/","items":[]}]},{"title":"Attachments","url":"","items":[{"title":"Slides Demo","url":"/Attachments/Slides demo/","items":[]}]},{"title":"Create Site","url":"/Create site/","items":[]},{"title":"Customization","url":"","items":[{"title":"Appearance","url":"/Customization/Appearance/","items":[]},{"title":"Custom Hotkeys","url":"/Customization/Custom hotkeys/","items":[]}]},{"title":"How To","url":"","items":[{"title":"Add Aliases to Note","url":"/How to/Add aliases to note/","items":[]},{"title":"Add Custom Styles","url":"/How to/Add custom styles/","items":[]},{"title":"Basic Note Taking","url":"/How to/Basic note taking/","items":[]},{"title":"Capture Information","url":"/How to/Capture information/","items":[]},{"title":"Change Settings","url":"/How to/Change settings/","items":[]},{"title":"Create Notes","url":"/How to/Create notes/","items":[]},{"title":"Embed Files","url":"/How to/Embed files/","items":[]},{"title":"Folding","url":"/How to/Folding/","items":[]},{"title":"Import Data","url":"/How to/Import data/","items":[]},{"title":"Internal Link","url":"/How to/Internal link/","items":[]},{"title":"Keyboard Shortcuts","url":"/How to/Keyboard shortcuts/","items":[]},{"title":"Link to Blocks","url":"/How to/Link to blocks/","items":[]},{"title":"Manage Attachments","url":"/How to/Manage attachments/","items":[]},{"title":"Preview and Edit Modes","url":"/How to/Preview and edit modes/","items":[]},{"title":"Rename Notes","url":"/How to/Rename notes/","items":[]},{"title":"This is a heading 1","url":"/How to/Format your notes/","items":[]},{"title":"Update Obsidian","url":"/How to/Update Obsidian/","items":[]},{"title":"Working with Backlinks","url":"/How to/Working with backlinks/","items":[]},{"title":"Working with Multiple Cursors","url":"/How to/Working with multiple cursors/","items":[]},{"title":"Working with Multiple Notes","url":"/How to/Working with multiple notes/","items":[]},{"title":"Working with Multiple Vaults","url":"/How to/Working with multiple vaults/","items":[]},{"title":"Working with Tags","url":"/How to/Working with tags/","items":[]}]},{"title":"Index","url":"/","items":[]},{"title":"Licenses & Add-on Services","url":"","items":[{"title":"Catalyst License","url":"/Licenses & add-on services/Catalyst license/","items":[]},{"title":"Commercial License","url":"/Licenses & add-on services/Commercial license/","items":[]},{"title":"Obsidian Publish","url":"/Licenses & add-on services/Obsidian Publish/","items":[]},{"title":"Obsidian Sync","url":"/Licenses & add-on services/Obsidian Sync/","items":[]},{"title":"Obsidian Unlimited","url":"/Licenses & add-on services/Obsidian Unlimited/","items":[]},{"title":"Refund Policy","url":"/Licenses & add-on services/Refund policy/","items":[]}]},{"title":"Obsidian","url":"/Obsidian/","items":[{"title":"Android App","url":"/Obsidian/Android app/","items":[]},{"title":"Credits","url":"/Obsidian/Credits/","items":[]},{"title":"iOS App","url":"/Obsidian/iOS app/","items":[]},{"title":"Mobile App Beta","url":"/Obsidian/Mobile app beta/","items":[]},{"title":"Obsidian","url":"/Obsidian/Obsidian/","items":[]},{"title":"Obsidian for Android","url":"/Obsidian/Obsidian Mobile/","items":[]}]},{"title":"Panes","url":"","items":[{"title":"Linked Pane","url":"/Panes/Linked pane/","items":[]},{"title":"Pane Layout","url":"/Panes/Pane layout/","items":[]}]},{"title":"Plugins","url":"","items":[{"title":"Audio Recorder","url":"/Plugins/Audio recorder/","items":[]},{"title":"Backlinks","url":"/Plugins/Backlinks/","items":[]},{"title":"Command Palette","url":"/Plugins/Command palette/","items":[]},{"title":"Daily Notes","url":"/Plugins/Daily notes/","items":[]},{"title":"File Explorer","url":"/Plugins/File explorer/","items":[]},{"title":"File Recovery","url":"/Plugins/File recovery/","items":[]},{"title":"Graph View","url":"/Plugins/Graph view/","items":[]},{"title":"List of Plugins","url":"/Plugins/List of plugins/","items":[]},{"title":"Markdown Format Converter","url":"/Plugins/Markdown format converter/","items":[]},{"title":"Note Composer","url":"/Plugins/Note composer/","items":[]},{"title":"Open in Default App","url":"/Plugins/Open in default app/","items":[]},{"title":"Outgoing Links","url":"/Plugins/Outgoing links/","items":[]},{"title":"Outline","url":"/Plugins/Outline/","items":[]},{"title":"Page Preview","url":"/Plugins/Page preview/","items":[]},{"title":"Publish","url":"/Plugins/Publish/","items":[]},{"title":"Quick Switcher","url":"/Plugins/Quick switcher/","items":[]},{"title":"Random Note","url":"/Plugins/Random note/","items":[]},{"title":"Search","url":"/Plugins/Search/","items":[]},{"title":"Slides","url":"/Plugins/Slides/","items":[]},{"title":"Starred Notes","url":"/Plugins/Starred notes/","items":[]},{"title":"Tag Pane","url":"/Plugins/Tag pane/","items":[]},{"title":"Templates","url":"/Plugins/Templates/","items":[]},{"title":"Word Count","url":"/Plugins/Word count/","items":[]},{"title":"Workspaces","url":"/Plugins/Workspaces/","items":[]},{"title":"Zettelkasten Prefixer","url":"/Plugins/Zettelkasten prefixer/","items":[]}]},{"title":"Start Here","url":"/Start here/","items":[]},{"title":"zetti ssg basics and extras","url":"/generator/","items":[]}]}],"tagsGroups":[],"latestPosts":[{"fields":{"slug":"/Create site/","title":"Create Site","lastUpdatedAt":"2023-06-06T05:35:07.000Z","lastUpdated":"6/6/2023"},"frontmatter":{"draft":false,"tags":[]}},{"fields":{"slug":"/generator/","title":"zetti ssg basics and extras","lastUpdatedAt":"2023-06-06T05:35:07.000Z","lastUpdated":"6/6/2023"},"frontmatter":{"draft":false,"tags":[]}},{"fields":{"slug":"/","title":"Index","lastUpdatedAt":"2023-06-06T05:35:07.000Z","lastUpdated":"6/6/2023"},"frontmatter":{"draft":false,"tags":[]}},{"fields":{"slug":"/","title":"What Template","lastUpdatedAt":"2022-08-19T09:20:06.000Z","lastUpdated":"8/19/2022"},"frontmatter":{"draft":false,"tags":[]}},{"fields":{"slug":"/How to/Embed files/","title":"Embed Files","lastUpdatedAt":"2021-09-03T06:27:46.000Z","lastUpdated":"9/3/2021"},"frontmatter":{"draft":false,"tags":[]}},{"fields":{"slug":"/How to/Format your notes/","title":"This is a heading 1","lastUpdatedAt":"2021-09-03T06:27:46.000Z","lastUpdated":"9/3/2021"},"frontmatter":{"draft":false,"tags":[]}},{"fields":{"slug":"/Plugins/Search/","title":"Search","lastUpdatedAt":"2021-09-03T06:25:50.000Z","lastUpdated":"9/3/2021"},"frontmatter":{"draft":false,"tags":[]}},{"fields":{"slug":"/Start here/","title":"Start Here","lastUpdatedAt":"2021-09-01T22:25:52.000Z","lastUpdated":"9/1/2021"},"frontmatter":{"draft":false,"tags":[]}},{"fields":{"slug":"/Advanced topics/Accepted file formats/","title":"Accepted File Formats","lastUpdatedAt":"2021-09-01T22:25:52.000Z","lastUpdated":"9/1/2021"},"frontmatter":{"draft":false,"tags":[]}},{"fields":{"slug":"/Advanced topics/Contributing to Obsidian/","title":"Contributing to Obsidian","lastUpdatedAt":"2021-09-01T22:25:52.000Z","lastUpdated":"9/1/2021"},"frontmatter":{"draft":false,"tags":[]}}]}},
    "staticQueryHashes": ["2230547434","2320115945","3495835395","451533639"]}